package com.telefonica.mistica.tokens.compose

import com.squareup.kotlinpoet.FileSpec
import com.squareup.kotlinpoet.PropertySpec
import com.squareup.kotlinpoet.TypeSpec
import com.telefonica.mistica.tokens.TokensGenerator
import com.telefonica.mistica.tokens.common.GetThemeVariantName
import com.telefonica.mistica.tokens.dto.TokensDTO
import com.telefonica.mistica.tokens.xml.GenerateXMLFiles.Companion.capitalizeString
import java.io.File

/**
 * Generates the XXXThemeVariantAutogenerated.kt file for each brand.
 */
class GenerateBrandThemeVariant(
    private val getThemeVariantName: GetThemeVariantName = GetThemeVariantName(),
) {
    operator fun invoke(tokens: TokensDTO, brandName: String) {
        val themeVariantProperty = PropertySpec.builder("themeVariant", GenerateComposeFiles.misticaThemeVariantClass)
            .initializer(getConstructor(tokens))
            .build()

        val themeVariantObject = TypeSpec.objectBuilder("${brandName.capitalizeString()}BrandThemeVariant")
            .addProperty(themeVariantProperty)
            .build()

        val file = FileSpec.builder("com.telefonica.mistica.compose.theme.brand", "${brandName.capitalizeString()}BrandThemeVariantAutogenerated")
            .addFileComment(TokensGenerator.AUTOGENERATED_COMMENT)
            .addImport("androidx.compose.ui.unit", "dp")
            .addType(themeVariantObject)
            .build()

        file.writeTo(File(GenerateComposeFiles.LIBRARY_CODE_PATH))
    }

    private fun getConstructor(tokens: TokensDTO): String {
        var themeVariantConstructor = "MisticaThemeVariant("
        tokens.themeVariant.forEach { (key, themeVariant) ->
            themeVariantConstructor += "\n${getThemeVariantName(key)} = \"${themeVariant.value}\","
        }
        themeVariantConstructor += ")"
        return themeVariantConstructor
    }
}
