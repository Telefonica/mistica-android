package com.telefonica.mistica.tokens.xml

import com.squareup.kotlinpoet.ClassName
import com.squareup.kotlinpoet.FileSpec
import com.squareup.kotlinpoet.FunSpec
import com.squareup.kotlinpoet.ParameterSpec
import com.squareup.kotlinpoet.PropertySpec
import com.squareup.kotlinpoet.TypeSpec
import com.telefonica.mistica.tokens.TokensGenerator
import java.io.File

/**
 * Generates the `MisticaGradientAutogenerated.kt` file, which contains all xml gradients in Mistica.
 */
class GenerateMisticaGradients {

    operator fun invoke(gradientTokensNames: List<String>) {
        val gradientsEnum = TypeSpec.enumBuilder(MISTICA_GRADIENT)
            .primaryConstructor(
                FunSpec.constructorBuilder()
                    .addParameters(getConstructorParameters())
                    .build()
            )
            .addProperties(getProperties())
            .apply {
                gradientTokensNames.forEach { tokenName ->
                    addEnumConstant(tokenName.capitalizeString(), getEnumParams(tokenName))
                }
            }
            .build()

        val file = FileSpec.builder("com.telefonica.mistica.theme.color", "${MISTICA_GRADIENT}Autogenerated")
            .addFileComment(TokensGenerator.AUTOGENERATED_COMMENT)
            .addType(gradientsEnum)
            .build()

        file.writeTo(File(LIBRARY_CODE_PATH))
    }

    private fun getConstructorParameters(): List<ParameterSpec> =
        listOf(
            ParameterSpec.builder(
                "gradientColorsAttrRes",
                intClass
            ).addAnnotation(attrResClass).build(),
            ParameterSpec.builder(
                "gradientStopsAttrRes",
                intClass
            ).addAnnotation(attrResClass).build(),
            ParameterSpec.builder(
                "gradientAngleAttrRes",
                intClass
            ).addAnnotation(attrResClass).build()
        )

    private fun getProperties(): List<PropertySpec> =
        listOf(
            PropertySpec.builder(
                "gradientColorsAttrRes",
                intClass
            ).initializer("gradientColorsAttrRes").build(),
            PropertySpec.builder(
                "gradientStopsAttrRes",
                intClass
            ).initializer("gradientStopsAttrRes").build(),
            PropertySpec.builder(
                "gradientAngleAttrRes",
                intClass
            ).initializer("gradientAngleAttrRes").build()
        )

    private fun getEnumParams(tokenName: String): TypeSpec =
        TypeSpec
            .anonymousClassBuilder()
            .addSuperclassConstructorParameter("%T.attr.%L", rClass, "gradientColors${tokenName.capitalizeString()}")
            .addSuperclassConstructorParameter("%T.attr.%L", rClass, "gradientStops${tokenName.capitalizeString()}")
            .addSuperclassConstructorParameter("%T.attr.%L", rClass, "gradientAngle${tokenName.capitalizeString()}")
            .build()

    private companion object {
        const val LIBRARY_CODE_PATH = "../library/src/main/java/"
        const val MISTICA_GRADIENT = "MisticaGradient"
        val intClass = ClassName("kotlin", "Int")
        val rClass = ClassName("com.telefonica.mistica", "R")
        val attrResClass = ClassName("androidx.annotation", "AttrRes")

        fun String.capitalizeString(): String =
            this.replaceFirstChar { if (it.isLowerCase()) it.titlecase() else it.toString() }
    }
}