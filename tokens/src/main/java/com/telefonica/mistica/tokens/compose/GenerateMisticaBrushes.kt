package com.telefonica.mistica.tokens.compose

import com.squareup.kotlinpoet.ClassName
import com.squareup.kotlinpoet.CodeBlock
import com.squareup.kotlinpoet.FileSpec
import com.squareup.kotlinpoet.FunSpec
import com.squareup.kotlinpoet.KModifier
import com.squareup.kotlinpoet.MemberName
import com.squareup.kotlinpoet.ParameterizedTypeName.Companion.parameterizedBy
import com.squareup.kotlinpoet.PropertySpec
import com.squareup.kotlinpoet.TypeSpec
import com.telefonica.mistica.tokens.TokensGenerator
import com.telefonica.mistica.tokens.compose.GenerateComposeFiles.Companion.MISTICA_BRUSHES
import com.telefonica.mistica.tokens.compose.GenerateComposeFiles.Companion.BRUSH_CLASS
import com.telefonica.mistica.tokens.compose.GenerateComposeFiles.Companion.colorClass
import com.telefonica.mistica.tokens.compose.GenerateComposeFiles.Companion.MISTICA_BRUSHES_CLASS
import com.telefonica.mistica.tokens.compose.GenerateComposeFiles.Companion.SOLID_COLOR_CLASS
import java.io.File

/**
 * Generates the `MisticaBrushesAutogenerated.kt` file, which contains all the brushes in Mistica.
 */
class GenerateMisticaBrushes {

    private val mutableStateOf = MemberName("androidx.compose.runtime", "mutableStateOf")
    private val structuralEqualityPolicy = MemberName("androidx.compose.runtime", "structuralEqualityPolicy")

    operator fun invoke(heterogeneousTokensNames: List<String>) {
        val colorsClass = TypeSpec.classBuilder(MISTICA_BRUSHES)
            .addProperties(getBrushProperties(heterogeneousTokensNames))
            .addFunction(getUpdateBrushesFunc(heterogeneousTokensNames))
            .build()

        val file = FileSpec.builder("com.telefonica.mistica.compose.theme.brushes", "${MISTICA_BRUSHES}Autogenerated")
            .addImport("androidx.compose.runtime", "getValue")
            .addImport("androidx.compose.runtime", "setValue")
            .addFileComment(TokensGenerator.AUTOGENERATED_COMMENT)
            .addType(colorsClass)
            .addProperty(getLocalBrushProperty())
            .build()

        file.writeTo(File(LIBRARY_CODE_PATH))
    }

    private fun getLocalBrushProperty(): PropertySpec {
        val providableCompositionLocalClass = ClassName("androidx.compose.runtime", "ProvidableCompositionLocal")
        val staticCompositionLocalOf = MemberName("androidx.compose.runtime", "staticCompositionLocalOf")
        return PropertySpec.builder("LocalMisticaBrushes", providableCompositionLocalClass.parameterizedBy(MISTICA_BRUSHES_CLASS))
            .addModifiers(KModifier.INTERNAL)
            .initializer("%M { %T() }", staticCompositionLocalOf, MISTICA_BRUSHES_CLASS)
            .build()
    }

    private fun getBrushProperties(brushes: List<String>): List<PropertySpec> {
        val defaultValue = CodeBlock.of("%T(%T.Unspecified)", SOLID_COLOR_CLASS, colorClass)
        return brushes.map {
            PropertySpec.builder(it, BRUSH_CLASS)
                .mutable()
                .delegate("%M(%L, %M())", mutableStateOf, defaultValue, structuralEqualityPolicy)
                .build()
        }
    }

    private fun getUpdateBrushesFunc(brushes: List<String>): FunSpec {
        val funSpec = FunSpec.builder("updateBrushesFrom")
            .addParameter("other", MISTICA_BRUSHES_CLASS)

        brushes.forEach {
            funSpec.addStatement("%N = other.%N", it, it)
        }

        return funSpec
            .build()
    }

    private companion object {
        const val LIBRARY_CODE_PATH = "../library/src/main/java/"
    }
}