package com.telefonica.mistica.tokens.compose

import com.squareup.kotlinpoet.ClassName
import com.squareup.kotlinpoet.FileSpec
import com.squareup.kotlinpoet.FunSpec
import com.squareup.kotlinpoet.KModifier
import com.squareup.kotlinpoet.MemberName
import com.squareup.kotlinpoet.ParameterSpec
import com.squareup.kotlinpoet.ParameterizedTypeName.Companion.parameterizedBy
import com.squareup.kotlinpoet.PropertySpec
import com.squareup.kotlinpoet.TypeSpec
import com.telefonica.mistica.tokens.TokensGenerator
import com.telefonica.mistica.tokens.compose.GenerateComposeFiles.Companion.MISTICA_BRUSHES
import com.telefonica.mistica.tokens.compose.GenerateComposeFiles.Companion.brushClass
import com.telefonica.mistica.tokens.compose.GenerateComposeFiles.Companion.colorClass
import com.telefonica.mistica.tokens.compose.GenerateComposeFiles.Companion.misticaBrushesClass
import com.telefonica.mistica.tokens.compose.GenerateComposeFiles.Companion.solidColorClass
import java.io.File

/**
 * Generates the `MisticaBrushesAutogenerated.kt` file, which contains all the brushes (gradients) in Mistica.
 */
class GenerateMisticaBrushes {

    private val mutableStateOf = MemberName("androidx.compose.runtime", "mutableStateOf")
    private val structuralEqualityPolicy = MemberName("androidx.compose.runtime", "structuralEqualityPolicy")

    operator fun invoke(gradientTokensNames: List<String>) {
        val colorsClass = TypeSpec.classBuilder(MISTICA_BRUSHES)
            .primaryConstructor(
                FunSpec.constructorBuilder()
                    .addParameters(getConstructorParameters(gradientTokensNames))
                    .build()
            )
            .addProperties(getBrushProperties(gradientTokensNames))
            .addFunction(getCopyFunc(gradientTokensNames))
            .addFunction(getUpdateBrushesFunc(gradientTokensNames))
            .build()

        val file = FileSpec.builder("com.telefonica.mistica.compose.theme.color", "${MISTICA_BRUSHES}Autogenerated")
            .addImport("androidx.compose.runtime", "getValue")
            .addImport("androidx.compose.runtime", "setValue")
            .addFileComment(TokensGenerator.AUTOGENERATED_COMMENT)
            .addType(colorsClass)
            .addProperty(getLocalBrushProperty())
            .build()

        file.writeTo(File(LIBRARY_CODE_PATH))
    }

    private fun getLocalBrushProperty(): PropertySpec {
        val providableCompositionLocalClass = ClassName("androidx.compose.runtime", "ProvidableCompositionLocal")
        val staticCompositionLocalOf = MemberName("androidx.compose.runtime", "staticCompositionLocalOf")
        return PropertySpec.builder("LocalMisticaBrushes", providableCompositionLocalClass.parameterizedBy(misticaBrushesClass))
            .addModifiers(KModifier.INTERNAL)
            .initializer("%M { %T() }", staticCompositionLocalOf, misticaBrushesClass)
            .build()
    }

    private fun getBrushProperties(brushes: List<String>): List<PropertySpec> =
        brushes.map {
            PropertySpec.builder(it, brushClass)
                .mutable()
                .delegate("%M(%N, %M())", mutableStateOf, it, structuralEqualityPolicy)
                .setter(
                    FunSpec.setterBuilder()
                        .addModifiers(KModifier.INTERNAL)
                        .build()
                )
                .build()
        }

    private fun getConstructorParameters(brushes: List<String>): List<ParameterSpec> =
        brushes.map {
            ParameterSpec.builder(
                it,
                brushClass
            ).defaultValue("%T(%T.Unspecified)", solidColorClass, colorClass).build()
        }

    private fun getUpdateBrushesFunc(colors: List<String>): FunSpec {
        val funSpec = FunSpec.builder("updateBrushesFrom")
            .addParameter("other", misticaBrushesClass)

        colors.forEach {
            funSpec.addStatement("%N = other.%N", it, it)
        }

        return funSpec
            .build()
    }

    private fun getCopyFunc(colors: List<String>): FunSpec {
        val parameters = colors.map {
            ParameterSpec.builder(it, brushClass).defaultValue("this.$it").build()
        }

        val constructorParameters = colors.joinToString(", ") {
            "$it = $it"
        }

        return FunSpec.builder("copy")
            .addParameters(parameters)
            .returns(misticaBrushesClass)
            .addStatement("return %T($constructorParameters)", misticaBrushesClass)
            .build()
    }

    private companion object {
        const val LIBRARY_CODE_PATH = "../library/src/main/java/"
    }
}