package com.telefonica.mistica.tokens.xml

import com.squareup.kotlinpoet.ClassName
import com.squareup.kotlinpoet.FileSpec
import com.squareup.kotlinpoet.FunSpec
import com.squareup.kotlinpoet.ParameterSpec
import com.squareup.kotlinpoet.PropertySpec
import com.squareup.kotlinpoet.TypeSpec
import com.telefonica.mistica.tokens.TokensGenerator
import com.telefonica.mistica.tokens.xml.GenerateXMLFiles.Companion.GRADIENT_PACKAGE
import com.telefonica.mistica.tokens.xml.GenerateXMLFiles.Companion.capitalizeString
import java.io.File

/**
 * Generates the `MisticaCompatibilityGradientAutogenerated.kt` file, which is an enum with all available xml gradients in Mistica
 * for less than Api 24 support.
 */
class GenerateMisticaCompatibilityGradientEnum {

    operator fun invoke(gradientTokensNames: List<String>) {
        val gradientsEnum = TypeSpec.enumBuilder(MISTICA_COMPATIBILITY_GRADIENT)
            .primaryConstructor(
                FunSpec.constructorBuilder()
                    .addParameters(getConstructorParameters())
                    .build()
            )
            .addProperties(getProperties())
            .apply {
                gradientTokensNames.forEach { tokenName ->
                    addEnumConstant(tokenName.capitalizeString(), getEnumParams(tokenName))
                }
            }
            .build()

        val file = FileSpec.builder(GRADIENT_PACKAGE, "${MISTICA_COMPATIBILITY_GRADIENT}Autogenerated")
            .addFileComment(TokensGenerator.AUTOGENERATED_COMMENT)
            .addType(gradientsEnum)
            .build()

        file.writeTo(File(LIBRARY_CODE_PATH))
    }

    private fun getConstructorParameters(): List<ParameterSpec> =
        listOf(
            ParameterSpec.builder(
                GRADIENT_COLORS_PROPERTY_NAME,
                intClass
            ).addAnnotation(attrResClass).build(),
            ParameterSpec.builder(
                GRADIENT_STOPS_PROPERTY_NAME,
                intClass
            ).addAnnotation(attrResClass).build(),
            ParameterSpec.builder(
                GRADIENT_ANGLE_PROPERTY_NAME,
                intClass
            ).addAnnotation(attrResClass).build()
        )

    private fun getProperties(): List<PropertySpec> =
        listOf(
            PropertySpec.builder(
                GRADIENT_COLORS_PROPERTY_NAME,
                intClass
            ).initializer(GRADIENT_COLORS_PROPERTY_NAME).build(),
            PropertySpec.builder(
                GRADIENT_STOPS_PROPERTY_NAME,
                intClass
            ).initializer(GRADIENT_STOPS_PROPERTY_NAME).build(),
            PropertySpec.builder(
                GRADIENT_ANGLE_PROPERTY_NAME,
                intClass
            ).initializer(GRADIENT_ANGLE_PROPERTY_NAME).build()
        )

    private fun getEnumParams(tokenName: String): TypeSpec =
        TypeSpec
            .anonymousClassBuilder()
            .addSuperclassConstructorParameter("%T.attr.%L", rClass, "$BRAND_GRADIENT_COLORS_ATTR_PREFIX${tokenName.capitalizeString()}")
            .addSuperclassConstructorParameter("%T.attr.%L", rClass, "$BRAND_GRADIENT_STOPS_ATTR_PREFIX${tokenName.capitalizeString()}")
            .addSuperclassConstructorParameter("%T.attr.%L", rClass, "$BRAND_GRADIENT_ANGLE_ATTR_PREFIX${tokenName.capitalizeString()}")
            .build()

    companion object {
        const val BRAND_DRAWABLE_PREFIX = "drawable"
        const val BRAND_GRADIENT_COLORS_ATTR_PREFIX = "gradientColors"
        const val BRAND_GRADIENT_STOPS_ATTR_PREFIX = "gradientStops"
        const val BRAND_GRADIENT_ANGLE_ATTR_PREFIX = "gradientAngle"

        private const val LIBRARY_CODE_PATH = "../library/src/main/java/"

        private const val MISTICA_COMPATIBILITY_GRADIENT = "MisticaCompatibilityGradient"

        private const val GRADIENT_COLORS_PROPERTY_NAME = "gradientColorsAttrRes"
        private const val GRADIENT_STOPS_PROPERTY_NAME = "gradientStopsAttrRes"
        private const val GRADIENT_ANGLE_PROPERTY_NAME = "gradientAngleAttrRes"

        private val intClass = ClassName("kotlin", "Int")
        private val rClass = ClassName("com.telefonica.mistica", "R")
        private val attrResClass = ClassName("androidx.annotation", "AttrRes")
    }
}