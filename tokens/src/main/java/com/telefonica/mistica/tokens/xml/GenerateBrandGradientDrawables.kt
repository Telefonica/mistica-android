package com.telefonica.mistica.tokens.xml

import com.squareup.kotlinpoet.ClassName
import com.squareup.kotlinpoet.FileSpec
import com.squareup.kotlinpoet.TypeSpec
import com.telefonica.mistica.tokens.TokensGenerator
import com.telefonica.mistica.tokens.common.GetColorResourceName
import com.telefonica.mistica.tokens.compose.GenerateComposeFiles
import com.telefonica.mistica.tokens.dto.BrushDTO
import com.telefonica.mistica.tokens.dto.TokensDTO
import com.telefonica.mistica.tokens.xml.GenerateXMLFiles.Companion.DRAWABLE_DIR
import com.telefonica.mistica.tokens.xml.GenerateXMLFiles.Companion.DRAWABLE_PACKAGE
import com.telefonica.mistica.tokens.xml.GenerateXMLFiles.Companion.TOOLS_NAMESPACE_ATTR
import com.telefonica.mistica.tokens.xml.GenerateXMLFiles.Companion.TOOLS_NAMESPACE_VALUE
import com.telefonica.mistica.tokens.xml.GenerateXMLFiles.Companion.capitalizeString
import org.redundent.kotlin.xml.PrintOptions
import org.redundent.kotlin.xml.XmlVersion
import org.redundent.kotlin.xml.xml
import java.io.File

class GenerateBrandGradientDrawables(
    private val getColorResourceName: GetColorResourceName = GetColorResourceName(),
    private val getDrawableResourceName: GetDrawableResourceName = GetDrawableResourceName(),
    private val getDrawableClassName: GetDrawableClassName = GetDrawableClassName(),
) {
    operator fun invoke(tokens: TokensDTO, brandName: String) {

        val gradients = tokens.light.map { false to it }
            .plus(tokens.dark.map { true to it })
            .filter { it.second.value is BrushDTO.GradientDTO }

        val file = FileSpec.builder(DRAWABLE_PACKAGE, "${brandName.capitalizeString()}$BRAND_GRADIENTS_FILENAME_SUFIX")
            .addFileComment(TokensGenerator.AUTOGENERATED_COMMENT)
            .addImport(R_CLASS.packageName, R_CLASS.simpleName)
            .apply {
                gradients.forEach { (isDark, token) ->
                    addType(generateGradientClass(token.key, token.value as BrushDTO.GradientDTO, brandName, isDark))
                }
            }
            .build()
        file.writeTo(File(GenerateComposeFiles.LIBRARY_CODE_PATH))

        gradients.forEach { (isDark, token) ->
            generateGradientDrawableFile(token.key, brandName, isDark)
        }
    }

    private fun generateGradientClass(tokenName: String, token: BrushDTO.GradientDTO, brandName: String, isDark: Boolean): TypeSpec {
        val angle = token.value.angle
        val colorStops = token.value.colors.joinToString(",\n") { color ->
            "${color.stop}F to ${R_CLASS.simpleName}.color.${getColorResourceName(color.value, brandName)}"
        }
        return TypeSpec.classBuilder(getDrawableClassName(tokenName, brandName, isDark))
            .superclass(LINEAR_GRADIENT_WITH_ANGLE_DRAWABLE_CLASS)
            .addSuperclassConstructorParameter("angleInDegrees = %LF", angle)
            .addSuperclassConstructorParameter("colorResStops = listOf(\n⇥%L⇤\n)", colorStops)
            .build()
    }

    private fun generateGradientDrawableFile(tokenName: String, brandName: String, isDark: Boolean) {
        val gradientResourcesXml = xml("drawable", "utf-8", XmlVersion.V10) {
            comment(TokensGenerator.AUTOGENERATED_COMMENT)
            attribute(TOOLS_NAMESPACE_ATTR, TOOLS_NAMESPACE_VALUE)
            attribute("class", "$DRAWABLE_PACKAGE.${getDrawableClassName(tokenName, brandName, isDark)}")
        }
        File(
            "$DRAWABLE_DIR/${getDrawableResourceName(brandName, tokenName, isDark)}.xml"
        ).writeText(gradientResourcesXml.toString(PrintOptions(singleLineTextElements = true)))
    }

    companion object {
        private const val BRAND_GRADIENTS_FILENAME_SUFIX = "BrandGradientsAutogenerated"

        private val LINEAR_GRADIENT_WITH_ANGLE_DRAWABLE_CLASS = ClassName(DRAWABLE_PACKAGE, "LinearGradientWithAngleDrawable")
        private val R_CLASS = ClassName("com.telefonica.mistica", "R")
    }
}
