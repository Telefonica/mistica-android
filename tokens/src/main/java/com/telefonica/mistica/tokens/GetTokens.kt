package com.telefonica.mistica.tokens

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.Moshi
import com.squareup.moshi.kotlin.reflect.KotlinJsonAdapterFactory
import com.telefonica.mistica.tokens.dto.TokensDTO
import org.redundent.kotlin.xml.XmlVersion
import org.redundent.kotlin.xml.xml
import java.io.File

class GetTokens {

    fun invoke() {
        val moshi: Moshi = Moshi.Builder()
            .addLast(KotlinJsonAdapterFactory())
            .build()
        val jsonAdapter: JsonAdapter<TokensDTO> = moshi.adapter(TokensDTO::class.java)
        generateAttributesFile(jsonAdapter)


        BRANDS.forEach { brand ->
            val json = File("$MISTICA_TOKENS_DIR/$brand.json").readText()
            val tokens = jsonAdapter.fromJson(json)
            if (tokens == null) {
                throw Exception("Invalid JSON")
            } else {
                generateColorsFiles(tokens, brand)
                generateLightThemesFiles(tokens, brand)
                generateDarkThemesFiles(tokens, brand)

            }
        }
    }

    private fun generateDarkThemesFiles(tokens: TokensDTO, brand: String) {
        val darkThemesXml = xml("resources", "utf-8", XmlVersion.V10) {
            comment(AUTOGENERATED_COMMENT)

            "style" {
                attribute("name", "MisticaTheme.${brand.capitalize()}")
                attribute("parent", "MisticaTheme.${brand.capitalize()}_Base")

                tokens.dark.forEach { color ->
                    val colorName = if (color.key == "controlActivated") {
                        "colorControlActive"
                    } else {
                        "color${color.key.capitalize()}"
                    }

                    "item" {
                        attribute("name", colorName)
                        -"@color/${brand}_color_${color.value.description}"
                    }
                }
            }
        }

        File("$VALUES_NIGHT_DIR/${THEMES_FILE.format(brand)}").writeText(darkThemesXml.toString())
    }

    private fun generateLightThemesFiles(tokens: TokensDTO, brand: String) {
        val lightThemesXml = xml("resources", "utf-8", XmlVersion.V10) {
            comment(AUTOGENERATED_COMMENT)

            "style" {
                attribute("name", "MisticaTheme.${brand.capitalize()}")
                attribute("parent", "MisticaTheme.${brand.capitalize()}_Base")
            }

            "style" {
                attribute("name", "MisticaTheme.${brand.capitalize()}_Base")

                tokens.light.forEach { color ->
                    val colorName = if (color.key == "controlActivated") {
                        "colorControlActive"
                    } else {
                        "color${color.key.capitalize()}"
                    }

                    "item" {
                        attribute("name", colorName)
                        -"@color/${brand}_color_${color.value.description}"
                    }
                }
            }
        }

        File("$VALUES_DIR/${THEMES_FILE.format(brand)}").writeText(lightThemesXml.toString())
    }

    private fun generateColorsFiles(tokens: TokensDTO, brand: String) {
        val colorsXml = xml("resources", "utf-8", XmlVersion.V10) {
            comment(AUTOGENERATED_COMMENT)

            tokens.global.palette.forEach { color ->
                val colorName = "${brand}_color_${color.key}"

                "color" {
                    attribute("name", colorName)
                    -color.value.value
                }
            }
        }

        File("$VALUES_DIR/${COLORS_FILE.format(brand)}").writeText(colorsXml.toString())
    }

    private fun generateAttributesFile(jsonAdapter: JsonAdapter<TokensDTO>) {
        val json = File("$MISTICA_TOKENS_DIR/movistar.json").readText()
        val tokens = jsonAdapter.fromJson(json)

        if (tokens == null) {
            throw Exception("Invalid JSON")
        } else {
            val attributesXml = xml("resources", "utf-8", XmlVersion.V10) {
                comment(AUTOGENERATED_COMMENT)
                "declare-styleable" {
                    attribute("name", "Colors")
                    tokens.light.forEach { color ->
                        var key = color.key

                        if (key == "controlActivated") {
                            comment("We cannot use colorControlActivated in Android because it overlaps with a framework attribute")
                            key = "controlActive"
                        }

                        "attr" {
                            attribute("name", "color${key.capitalize()}")
                            attribute("format", "color|reference")
                        }
                    }

                    GRADIENT_ATTRS.forEach { color ->
                        "attr" {
                            attribute("name", color)
                            attribute("format", "color|reference")
                        }
                    }
                }

                "declare-styleable" {
                    attribute("name", "BorderRadius")
                    tokens.radius.forEach { radius ->
                        "attr" {
                            attribute("name", "${radius.key}BorderRadius")
                            attribute("format", "dimension")
                        }
                    }
                }
            }

            File("$VALUES_DIR/$ATTRS_FILE").writeText(attributesXml.toString())
        }
    }

    private companion object {
        const val MISTICA_TOKENS_DIR = "../.github/mistica-design/tokens"
        const val VALUES_DIR = "../library/src/main/res/values"
        const val VALUES_NIGHT_DIR = "../library/src/main/res/values-night"
        const val ATTRS_FILE = "attrs_autogenerated.xml"
        const val COLORS_FILE = "colors_%s_autogenerated.xml"
        const val THEMES_FILE = "themes_%s_autogenerated.xml"
        const val AUTOGENERATED_COMMENT = "Code generated automatically, DO NOT EDIT manually"
        val BRANDS = listOf("blau", "movistar", "o2", "telefonica", "vivo")
        val GRADIENT_ATTRS = listOf(
            "colorGradientBackgroundFirst",
            "colorGradientBackgroundSecond",
            "colorGradientBackgroundThird",
            "colorGradientBackgroundFourth",
            "colorLoginLoadingGradientFirst",
            "colorLoginLoadingGradientSecond",
            "colorLoginLoadingGradientThird",
            "colorLoginLoadingGradientFourth",
        )
    }

    private fun String.capitalize(): String {
        return this.replaceFirstChar { if (it.isLowerCase()) it.titlecase() else it.toString() }
    }
}
