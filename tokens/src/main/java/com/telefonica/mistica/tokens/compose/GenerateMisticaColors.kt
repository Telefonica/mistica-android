package com.telefonica.mistica.tokens.compose

import com.squareup.kotlinpoet.ClassName
import com.squareup.kotlinpoet.FileSpec
import com.squareup.kotlinpoet.FunSpec
import com.squareup.kotlinpoet.KModifier
import com.squareup.kotlinpoet.MemberName
import com.squareup.kotlinpoet.ParameterSpec
import com.squareup.kotlinpoet.ParameterizedTypeName.Companion.parameterizedBy
import com.squareup.kotlinpoet.PropertySpec
import com.squareup.kotlinpoet.TypeSpec
import com.telefonica.mistica.tokens.GenerateTokens
import java.io.File

class GenerateMisticaColors {

    private val colorClass = ClassName("androidx.compose.ui.graphics", "Color")
    private val misticaColorsClass = ClassName("com.telefonica.mistica.compose.theme.color", MISTICA_COLORS)
    private val mutableStateOf = MemberName("androidx.compose.runtime", "mutableStateOf")
    private val structuralEqualityPolicy = MemberName("androidx.compose.runtime", "structuralEqualityPolicy")

    operator fun invoke(colors: List<String>) {
        val colorsClass = TypeSpec.classBuilder(MISTICA_COLORS)
            .primaryConstructor(
                FunSpec.constructorBuilder()
                    .addParameters(getConstructorParameters(colors))
                    .build()
            )
            .addProperties(getColorProperties(colors))
            .addFunction(getCopyFunc(colors))
            .addFunction(getUpdateColorsFunc(colors))
            .build()

        val file = FileSpec.builder("com.telefonica.mistica.compose.theme.color", MISTICA_COLORS)
            .addImport("androidx.compose.runtime", "getValue")
            .addImport("androidx.compose.runtime", "setValue")
            .addFileComment(GenerateTokens.AUTOGENERATED_COMMENT)
            .addType(colorsClass)
            .addProperty(getLocalColorProperty())
            .build()

        file.writeTo(File(LIBRARY_CODE_PATH))
    }

    private fun getLocalColorProperty(): PropertySpec {
        val providableCompositionLocalClass = ClassName("androidx.compose.runtime", "ProvidableCompositionLocal")
        val staticCompositionLocalOf = MemberName("androidx.compose.runtime", "staticCompositionLocalOf")
        return PropertySpec.builder("LocalMisticaColors", providableCompositionLocalClass.parameterizedBy(misticaColorsClass))
            .addModifiers(KModifier.INTERNAL)
            .initializer("%M { %T() }", staticCompositionLocalOf, misticaColorsClass)
            .build()
    }

    private fun getColorProperties(colors: List<String>): List<PropertySpec> =
        colors.map {
            PropertySpec.builder(it, colorClass)
                .mutable()
                .delegate("%M(%N, %M())", mutableStateOf, it, structuralEqualityPolicy)
                .setter(
                    FunSpec.setterBuilder()
                        .addModifiers(KModifier.INTERNAL)
                        .build()
                )
                .build()
        }

    private fun getConstructorParameters(colors: List<String>): List<ParameterSpec> =
        colors.map {
            ParameterSpec.builder(
                it,
                colorClass
            ).defaultValue("Color.Unspecified").build()
        }

    private fun getUpdateColorsFunc(colors: List<String>): FunSpec {
        val funSpec = FunSpec.builder("updateColorsFrom")
            .addParameter("other", misticaColorsClass)

        colors.forEach {
            funSpec.addStatement("%N = other.%N", it, it)
        }

        return funSpec
            .build()
    }

    private fun getCopyFunc(colors: List<String>): FunSpec {
        val parameters = colors.map {
            ParameterSpec.builder(it, colorClass).defaultValue("this.$it").build()
        }

        val constructorParameters = colors.joinToString(", ") {
            "$it = $it"
        }

        return FunSpec.builder("copy")
            .addParameters(parameters)
            .addStatement("return %T($constructorParameters)", misticaColorsClass)
            .build()
    }

    private companion object {
        const val LIBRARY_CODE_PATH = "../library/src/main/java/"
        const val MISTICA_COLORS = "MisticaColors"
    }
}