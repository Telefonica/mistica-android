package com.telefonica.mistica.tokens.compose

import com.squareup.kotlinpoet.ClassName
import com.squareup.kotlinpoet.FileSpec
import com.squareup.kotlinpoet.FunSpec
import com.squareup.kotlinpoet.KModifier
import com.squareup.kotlinpoet.MemberName
import com.squareup.kotlinpoet.ParameterSpec
import com.squareup.kotlinpoet.ParameterizedTypeName.Companion.parameterizedBy
import com.squareup.kotlinpoet.PropertySpec
import com.squareup.kotlinpoet.TypeSpec
import com.squareup.moshi.JsonAdapter
import com.telefonica.mistica.tokens.TokensGenerator
import com.telefonica.mistica.tokens.compose.GenerateComposeFiles.Companion.MISTICA_COLORS
import com.telefonica.mistica.tokens.compose.GenerateComposeFiles.Companion.colorClass
import com.telefonica.mistica.tokens.compose.GenerateComposeFiles.Companion.misticaColorsClass
import com.telefonica.mistica.tokens.dto.TokensDTO
import com.telefonica.mistica.tokens.dto.removeHeterogeneousTokens
import java.io.File

/**
 * Generates the `MisticaColorsAutogenerated.kt` file, which contains all the colors defined in Mistica.
 */
class GenerateMisticaColors {

    private val mutableStateOf = MemberName("androidx.compose.runtime", "mutableStateOf")
    private val structuralEqualityPolicy = MemberName("androidx.compose.runtime", "structuralEqualityPolicy")

    operator fun invoke(jsonAdapter: JsonAdapter<TokensDTO>, heterogeneousTokensNames: List<String>) {
        val json = File("${TokensGenerator.MISTICA_TOKENS_DIR}/movistar.json").readText()
        val tokens = jsonAdapter.fromJson(json)

        if (tokens == null) {
            throw Exception("Invalid JSON")
        } else {
            val colors = getColors(tokens, heterogeneousTokensNames)
            val colorsClass = TypeSpec.classBuilder(MISTICA_COLORS)
                .addProperties(getColorProperties(colors))
                .addFunction(getCopyFunc(colors))
                .addFunction(getUpdateColorsFunc(colors))
                .build()

            val file = FileSpec.builder("com.telefonica.mistica.compose.theme.color", "${MISTICA_COLORS}Autogenerated")
                .addImport("androidx.compose.runtime", "getValue")
                .addImport("androidx.compose.runtime", "setValue")
                .addFileComment(TokensGenerator.AUTOGENERATED_COMMENT)
                .addType(colorsClass)
                .addProperty(getLocalColorProperty())
                .build()

            file.writeTo(File(LIBRARY_CODE_PATH))
        }
    }

    private fun getLocalColorProperty(): PropertySpec {
        val providableCompositionLocalClass = ClassName("androidx.compose.runtime", "ProvidableCompositionLocal")
        val staticCompositionLocalOf = MemberName("androidx.compose.runtime", "staticCompositionLocalOf")
        return PropertySpec.builder("LocalMisticaColors", providableCompositionLocalClass.parameterizedBy(misticaColorsClass))
            .addModifiers(KModifier.INTERNAL)
            .initializer("%M { %T() }", staticCompositionLocalOf, misticaColorsClass)
            .build()
    }

    private fun getColorProperties(colors: List<String>): List<PropertySpec> =
        colors.map {
            PropertySpec.builder(it, colorClass)
                .mutable()
                .delegate("%M(%L, %M())", mutableStateOf, DEFAULT_COLOR, structuralEqualityPolicy)
                .setter(
                    FunSpec.setterBuilder()
                        .addModifiers(KModifier.INTERNAL)
                        .build()
                )
                .build()
        }

    private fun getUpdateColorsFunc(colors: List<String>): FunSpec {
        val funSpec = FunSpec.builder("updateColorsFrom")
            .addParameter("other", misticaColorsClass)

        colors.forEach {
            funSpec.addStatement("%N = other.%N", it, it)
        }

        return funSpec
            .build()
    }

    private fun getCopyFunc(colors: List<String>): FunSpec {
        val parameters = colors.map {
            ParameterSpec.builder(it, colorClass).defaultValue("this.$it").build()
        }

        val assignationStatements = colors.joinToString("\n") {
            "it.$it = $it"
        }

        return FunSpec.builder("copy")
            .addParameters(parameters)
            .returns(misticaColorsClass)
            .addStatement("return %T().let {\n⇥$assignationStatements\nit⇤\n}", misticaColorsClass)
            .build()
    }

    private fun getColors(tokens: TokensDTO, heterogeneousTokensNames: List<String>) =
        tokens.light.removeHeterogeneousTokens(heterogeneousTokensNames).keys.toList()

    private companion object {
        const val LIBRARY_CODE_PATH = "../library/src/main/java/"
        const val DEFAULT_COLOR = "Color.Unspecified"
    }
}