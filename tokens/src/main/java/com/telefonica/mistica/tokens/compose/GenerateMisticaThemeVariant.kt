package com.telefonica.mistica.tokens.compose

import com.squareup.kotlinpoet.ClassName
import com.squareup.kotlinpoet.FileSpec
import com.squareup.kotlinpoet.FunSpec
import com.squareup.kotlinpoet.KModifier
import com.squareup.kotlinpoet.MemberName
import com.squareup.kotlinpoet.ParameterSpec
import com.squareup.kotlinpoet.ParameterizedTypeName.Companion.parameterizedBy
import com.squareup.kotlinpoet.PropertySpec
import com.squareup.kotlinpoet.TypeSpec
import com.squareup.moshi.JsonAdapter
import com.telefonica.mistica.tokens.TokensGenerator
import com.telefonica.mistica.tokens.common.GetThemeVariantName
import com.telefonica.mistica.tokens.compose.GenerateComposeFiles.Companion.misticaThemeVariantClass
import com.telefonica.mistica.tokens.compose.GenerateComposeFiles.Companion.stringClass
import com.telefonica.mistica.tokens.dto.ThemeVariantDTO
import com.telefonica.mistica.tokens.dto.TokensDTO
import java.io.File

/**
 * Generates the `MisticaThemeVariantAutogenerated.kt` file, which contains all the themeVariants defined in Mistica.
 */
class GenerateMisticaThemeVariant(
    private val getThemeVariantName: GetThemeVariantName = GetThemeVariantName(),
) {

    private val mutableStateOf = MemberName("androidx.compose.runtime", "mutableStateOf")
    private val structuralEqualityPolicy = MemberName("androidx.compose.runtime", "structuralEqualityPolicy")

    operator fun invoke(jsonAdapter: JsonAdapter<TokensDTO>) {
        val json = File("${TokensGenerator.MISTICA_TOKENS_DIR}/movistar.json").readText()
        val tokens = jsonAdapter.fromJson(json)

        if (tokens == null) {
            throw Exception("Invalid JSON")
        } else {
            val themeVariantClass = TypeSpec.classBuilder("MisticaThemeVariant")
                .primaryConstructor(
                    FunSpec.constructorBuilder()
                        .addParameters(getConstructorParameters(tokens.themeVariant))
                        .build()
                )
                .addProperties(getProperties(tokens.themeVariant))
                .addFunction(getUpdateThemeVariantsClass(tokens.themeVariant))
                .build()

            val file = FileSpec.builder("com.telefonica.mistica.compose.theme.values", "MisticaThemeVariantAutogenerated")
                .addImport("androidx.compose.runtime", "getValue")
                .addImport("androidx.compose.runtime", "setValue")
                .addFileComment(TokensGenerator.AUTOGENERATED_COMMENT)
                .addType(themeVariantClass)
                .addProperty(getLocalThemeVariantProperty())
                .build()

            file.writeTo(File(LIBRARY_CODE_PATH))
        }
    }

    private fun getConstructorParameters(themeVariants: Map<String, ThemeVariantDTO>): List<ParameterSpec> =
        themeVariants.map { (key, _) ->
            val defaultValue = "\"default\""
            ParameterSpec.builder(
                getThemeVariantName(key),
                stringClass
            ).defaultValue(defaultValue).build()
        }

    private fun getProperties(themeVariants: Map<String, ThemeVariantDTO>): List<PropertySpec> =
        themeVariants.map { (key, _) ->
            val themeVariantName = getThemeVariantName(key)
            PropertySpec.builder(
                themeVariantName,
                stringClass
            )
                .mutable()
                .delegate("%M(%N, %M())", mutableStateOf, themeVariantName, structuralEqualityPolicy)
                .setter(
                    FunSpec.setterBuilder()
                        .addModifiers(KModifier.INTERNAL)
                        .build()
                )
                .build()
        }

    private fun getUpdateThemeVariantsClass(themeVariants: Map<String, ThemeVariantDTO>): FunSpec {
        val funSpec = FunSpec.builder("updateWith")
            .addParameter("other", misticaThemeVariantClass)

        themeVariants.forEach { (key, _) ->
            val themeVariantName = getThemeVariantName(key)
            funSpec.addStatement("%N = other.%N", themeVariantName, themeVariantName)
        }

        return funSpec
            .build()
    }

    private fun getLocalThemeVariantProperty(): PropertySpec {
        val providableCompositionLocalClass = ClassName("androidx.compose.runtime", "ProvidableCompositionLocal")
        val staticCompositionLocalOf = MemberName("androidx.compose.runtime", "staticCompositionLocalOf")
        return PropertySpec.builder("LocalMisticaThemeVariant", providableCompositionLocalClass.parameterizedBy(misticaThemeVariantClass))
            .addModifiers(KModifier.INTERNAL)
            .initializer("%M { %T() }", staticCompositionLocalOf, misticaThemeVariantClass)
            .build()
    }

    private companion object {
        const val LIBRARY_CODE_PATH = "../library/src/main/java/"
    }
}
