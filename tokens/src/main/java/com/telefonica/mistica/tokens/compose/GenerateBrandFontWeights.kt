package com.telefonica.mistica.tokens.compose

import com.squareup.kotlinpoet.ClassName
import com.squareup.kotlinpoet.FileSpec
import com.squareup.kotlinpoet.PropertySpec
import com.squareup.kotlinpoet.TypeSpec
import com.telefonica.mistica.tokens.TokensGenerator
import com.telefonica.mistica.tokens.TokensGenerator.Companion.BOLD
import com.telefonica.mistica.tokens.TokensGenerator.Companion.LIGHT
import com.telefonica.mistica.tokens.TokensGenerator.Companion.MEDIUM
import com.telefonica.mistica.tokens.TokensGenerator.Companion.REGULAR
import com.telefonica.mistica.tokens.dto.TokensDTO
import com.telefonica.mistica.tokens.xml.GenerateXMLFiles.Companion.capitalizeString
import java.io.File

/**
 * Generates the XXXBrandFontWeightsAutogenerated.kt file for each brand.
 */
class GenerateBrandFontWeights {
    private val fontWeightClass = ClassName("androidx.compose.ui.text.font", "FontWeight")

    operator fun invoke(tokens: TokensDTO, brand: String) {

        val properties = tokens.text.weight.map { (key, text) ->
            val value = when (text.value) {
                LIGHT -> "FontWeight.Light"
                REGULAR -> "FontWeight.Normal"
                MEDIUM -> "FontWeight.Medium"
                BOLD -> "FontWeight.Bold"
                else -> throw Exception("Invalid text weight")
            }

            PropertySpec.builder("${key}FontWeight", fontWeightClass)
                .initializer(value)
                .build()
        }

        val textObject = TypeSpec.objectBuilder("${brand.capitalizeString()}BrandFontWeights")
            .addProperties(properties)
            .build()

        val file = FileSpec.builder("com.telefonica.mistica.compose.theme.brand", "${brand.capitalizeString()}BrandFontWeightsAutogenerated")
            .addFileComment(TokensGenerator.AUTOGENERATED_COMMENT)
            .addType(textObject)
            .build()

        file.writeTo(File(GenerateComposeFiles.LIBRARY_CODE_PATH))
    }
}
