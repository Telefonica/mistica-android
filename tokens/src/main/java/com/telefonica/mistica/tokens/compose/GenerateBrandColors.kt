package com.telefonica.mistica.tokens.compose

import com.squareup.kotlinpoet.ClassName
import com.squareup.kotlinpoet.FileSpec
import com.squareup.kotlinpoet.KModifier
import com.squareup.kotlinpoet.PropertySpec
import com.squareup.kotlinpoet.TypeSpec
import com.telefonica.mistica.tokens.GenerateTokens
import com.telefonica.mistica.tokens.common.GetColorNameWithAlpha
import com.telefonica.mistica.tokens.common.GetColorsWithAlpha
import com.telefonica.mistica.tokens.dto.ColorDTO
import com.telefonica.mistica.tokens.dto.TokensDTO
import com.telefonica.mistica.tokens.xml.GenerateXML.Companion.capitalizeString
import java.io.File

class GenerateBrandColors {

    private val misticaColorsClass = ClassName("com.telefonica.mistica.compose.theme.color", GenerateCompose.MISTICA_COLORS)
    private val colorClass = ClassName("androidx.compose.ui.graphics", "Color")
    private val getColorsWithAlpha = GetColorsWithAlpha()
    private val getColorNameWithAlpha = GetColorNameWithAlpha()

    operator fun invoke(tokens: TokensDTO) {
        GenerateTokens.BRANDS.forEach { brand ->
            val paletteClassName = "${brand.capitalizeString()}PaletteColor"

            val lightProperty = PropertySpec.builder("lightColors", misticaColorsClass)
                .initializer(getColorsConstructor(brand, tokens.light, paletteClassName))
                .build()
            val darkProperty = PropertySpec.builder("darkColors", misticaColorsClass)
                .initializer(getColorsConstructor(brand, tokens.dark, paletteClassName))
                .build()

            val colorsObject = TypeSpec.objectBuilder("${brand.capitalizeString()}BrandColors")
                .addProperty(lightProperty)
                .addProperty(darkProperty)
                .build()

            val paletteObject = TypeSpec.objectBuilder(paletteClassName)
                .addModifiers(KModifier.PRIVATE)
                .addProperties(getPaletteProperties(tokens, brand))
                .build()

            val file = FileSpec.builder("com.telefonica.mistica.compose.theme.brand", "${brand.capitalizeString()}BrandColorsAutogenerated")
                .addFileComment(GenerateTokens.AUTOGENERATED_COMMENT)
                .addType(colorsObject)
                .addType(paletteObject)
                .build()

            file.writeTo(File(GenerateCompose.LIBRARY_CODE_PATH))
        }
    }

    private fun getColorsConstructor(
        brand: String,
        colors: Map<String, ColorDTO>,
        paletteClassName: String,
    ): String {

        var colorsConstructor = "${GenerateCompose.MISTICA_COLORS}("

        colors.forEach { color ->
            var colorValue = "${brand}_color_${color.value.description}"

            if (color.value.value.contains("rgba(")) {
                val alpha = GenerateTokens.ALPHA_REGEX.find(color.value.value)?.value?.toDouble()
                if (alpha != null) {
                    colorValue = getColorNameWithAlpha(brand, color.value.description, alpha)
                    colorsConstructor += "${color.key} = $paletteClassName.$colorValue, \n"
                }
            } else {
                colorsConstructor += "${color.key} = $paletteClassName.$colorValue, \n"
            }
        }

        return "$colorsConstructor)"
    }

    private fun getPaletteProperties(
        tokens: TokensDTO,
        brand: String,
    ): MutableList<PropertySpec> {
        val properties = mutableListOf<PropertySpec>()

        tokens.global.palette.forEach { color ->
            val colorName = "${brand}_color_${color.key}"

            val property = PropertySpec.builder(colorName, colorClass)
                .initializer("%T(%L)", colorClass, color.value.value.toHexColor())
                .build()
            properties.add(property)
        }

        getColorsWithAlpha(tokens, brand).forEach { colorWithAlpha ->
            val property = PropertySpec.builder(colorWithAlpha.first, colorClass)
                .initializer("%T(%L)", colorClass, colorWithAlpha.second.toHexColor())
                .build()
            properties.add(property)
        }
        return properties
    }

    private fun String.toHexColor(): String {
        if (this.length == 7) {
            return "0xFF${this.substring(1)}"
        }

        return "0x${this.substring(1)}"
    }
}
