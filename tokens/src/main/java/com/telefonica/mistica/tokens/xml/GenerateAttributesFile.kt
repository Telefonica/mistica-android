package com.telefonica.mistica.tokens.xml

import com.squareup.moshi.JsonAdapter
import com.telefonica.mistica.tokens.GenerateTokens.Companion.AUTOGENERATED_COMMENT
import com.telefonica.mistica.tokens.GenerateTokens.Companion.MISTICA_TOKENS_DIR
import com.telefonica.mistica.tokens.xml.GenerateXMLFiles.Companion.ATTRS_FILE
import com.telefonica.mistica.tokens.xml.GenerateXMLFiles.Companion.VALUES_DIR
import com.telefonica.mistica.tokens.xml.GenerateXMLFiles.Companion.capitalizeString
import com.telefonica.mistica.tokens.dto.TokensDTO
import org.redundent.kotlin.xml.XmlVersion
import org.redundent.kotlin.xml.xml
import java.io.File

class GenerateAttributesFile {

    operator fun invoke(jsonAdapter: JsonAdapter<TokensDTO>) {
        val json = File("${MISTICA_TOKENS_DIR}/movistar.json").readText()
        val tokens = jsonAdapter.fromJson(json)

        if (tokens == null) {
            throw Exception("Invalid JSON")
        } else {
            val attributesXml = xml("resources", "utf-8", XmlVersion.V10) {
                comment(AUTOGENERATED_COMMENT)
                "declare-styleable" {
                    attribute("name", "Colors")
                    tokens.light.forEach { color ->
                        var key = color.key

                        if (key == "controlActivated") {
                            comment("We cannot use colorControlActivated in Android because it overlaps with a framework attribute")
                            key = "controlActive"
                        }

                        "attr" {
                            attribute("name", "color${key.capitalizeString()}")
                            attribute("format", "color|reference")
                        }
                    }

                    GRADIENT_ATTRS.forEach { color ->
                        "attr" {
                            attribute("name", color)
                            attribute("format", "color|reference")
                        }
                    }
                }

                "declare-styleable" {
                    attribute("name", "BorderRadius")
                    tokens.radius.forEach { radius ->
                        "attr" {
                            attribute("name", "${radius.key}BorderRadius")
                            attribute("format", "dimension")
                        }
                    }
                }
            }

            File("${VALUES_DIR}/${ATTRS_FILE}").writeText(attributesXml.toString())
        }
    }

    private companion object {
        val GRADIENT_ATTRS = listOf(
            "colorGradientBackgroundFirst",
            "colorGradientBackgroundSecond",
            "colorGradientBackgroundThird",
            "colorGradientBackgroundFourth",
            "colorLoginLoadingGradientFirst",
            "colorLoginLoadingGradientSecond",
            "colorLoginLoadingGradientThird",
            "colorLoginLoadingGradientFourth",
        )
    }
}