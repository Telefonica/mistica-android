package com.telefonica.mistica.tokens.xml

import com.squareup.kotlinpoet.ClassName
import com.squareup.kotlinpoet.CodeBlock
import com.squareup.kotlinpoet.FileSpec
import com.squareup.kotlinpoet.FunSpec
import com.squareup.kotlinpoet.ParameterSpec
import com.squareup.kotlinpoet.TypeSpec
import com.telefonica.mistica.tokens.Brand
import com.telefonica.mistica.tokens.TokensGenerator
import com.telefonica.mistica.tokens.dto.BrushDTO
import com.telefonica.mistica.tokens.dto.TokensDTO
import com.telefonica.mistica.tokens.xml.GenerateXMLFiles.Companion.DRAWABLE_PACKAGE
import java.io.File

/**
 * Generates the `MisticaGradientCompatibilityMapperAutogenerated.kt` file, which provides auto-generated mappers
 * for less than Api 24 support custom drawables.
 */
class GenerateDrawableCompatibilityMapper(
    private val getDrawableResourceName: GetDrawableResourceName = GetDrawableResourceName(),
    private val getDrawableClassName: GetDrawableClassName = GetDrawableClassName(),
) {

    operator fun invoke(brandsTokens: List<Pair<TokensDTO, Brand>>) {
        val mappersObject = TypeSpec.objectBuilder(OBJECT_NAME)
            .addFunction(getInstantiationFunction(brandsTokens))
            .build()

        val file = FileSpec.builder(DRAWABLE_PACKAGE, "${OBJECT_NAME}Autogenerated")
            .addFileComment(TokensGenerator.AUTOGENERATED_COMMENT)
            .addType(mappersObject)
            .build()

        file.writeTo(File(LIBRARY_CODE_PATH))
    }

    private fun getInstantiationFunction(brandsTokens: List<Pair<TokensDTO, Brand>>): FunSpec =
        FunSpec.builder(INSTANTIATION_FUNCTION_NAME)
            .addParameter(
                ParameterSpec(INSTANTIATION_FUNCTION_CLASSNAME_PARAM_NAME, INT_CLASS)
                    .toBuilder()
                    .addAnnotation(DRAWABLE_RES_CLASS)
                    .build()
            )
            .returns(PAINT_DRAWABLE_CLASS.copy(nullable = true))
            .addStatement("return when (%L) {\n⇥%L⇤\n}", INSTANTIATION_FUNCTION_CLASSNAME_PARAM_NAME, getInstantiationFunctionWhenBranches(brandsTokens))
            .build()

    private fun getInstantiationFunctionWhenBranches(brandsTokens: List<Pair<TokensDTO, Brand>>): CodeBlock =
        CodeBlock.builder().apply {
            brandsTokens.forEach { (tokens, brand) ->
                val gradients = tokens.light.map { false to it }
                    .plus(tokens.dark.map { true to it })
                    .filter { it.second.value is BrushDTO.GradientDTO }
                gradients.forEach { gradient ->
                    val gradientSimpleClassName = getDrawableClassName(gradient.second.key, brand.name, gradient.first)
                    addStatement(
                        "%T.drawable.%L -> $gradientSimpleClassName()", R_CLASS, getDrawableResourceName(brand.name, gradient.second.key, gradient.first)
                    )
                }
            }
            addStatement("else -> %L", "null")
        }.build()

    companion object {
        private const val LIBRARY_CODE_PATH = "../library/src/main/java/"
        private const val OBJECT_NAME = "MisticaDrawableCompatibilityMapper"

        private const val INSTANTIATION_FUNCTION_NAME = "getDrawable"
        private const val INSTANTIATION_FUNCTION_CLASSNAME_PARAM_NAME = "drawableResourceId"

        private val R_CLASS = ClassName("com.telefonica.mistica", "R")
        private val PAINT_DRAWABLE_CLASS = ClassName("android.graphics.drawable", "PaintDrawable")
        private val INT_CLASS = ClassName("kotlin", "Int")
        private val DRAWABLE_RES_CLASS = ClassName("androidx.annotation", "DrawableRes")
    }
}