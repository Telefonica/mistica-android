package com.telefonica.mistica.tokens.compose

import com.squareup.kotlinpoet.FileSpec
import com.squareup.kotlinpoet.PropertySpec
import com.squareup.kotlinpoet.TypeSpec
import com.telefonica.mistica.tokens.TokensGenerator
import com.telefonica.mistica.tokens.common.GetBorderRadiusName
import com.telefonica.mistica.tokens.dto.TokensDTO
import com.telefonica.mistica.tokens.xml.GenerateXMLFiles.Companion.capitalizeString
import java.io.File

/**
 * Generates the XXXBrandRadiusAutogenerated.kt file for each brand.
 */
class GenerateBrandRadius(
    private val getBorderRadiusName: GetBorderRadiusName = GetBorderRadiusName(),
) {
    operator fun invoke(tokens: TokensDTO, brandName: String) {
        val radiusProperty = PropertySpec.builder("radius", GenerateComposeFiles.misticaRadiusClass)
            .initializer(getConstructor(tokens))
            .build()

        val radiusObject = TypeSpec.objectBuilder("${brandName.capitalizeString()}BrandRadius")
            .addProperty(radiusProperty)
            .build()

        val file = FileSpec.builder("com.telefonica.mistica.compose.theme.brand", "${brandName.capitalizeString()}BrandRadiusAutogenerated")
            .addFileComment(TokensGenerator.AUTOGENERATED_COMMENT)
            .addImport("androidx.compose.ui.unit", "dp")
            .addType(radiusObject)
            .build()

        file.writeTo(File(GenerateComposeFiles.LIBRARY_CODE_PATH))
    }

    private fun getConstructor(tokens: TokensDTO): String {
        var radiusConstructor = "MisticaRadius("
        tokens.radius.forEach { (key, radius) ->
            val value = if (radius.value == TokensGenerator.CIRCLE_RADIUS) {
                50
            } else "${radius.value}.dp"

            radiusConstructor += "\n${getBorderRadiusName(key)} = ${value},"
        }
        radiusConstructor += ")"
        return radiusConstructor
    }
}
